{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww12320\viewh15320\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This README is for an image processing program created by Henry deGrasse and Wanru Shao for Northeastern University\'92s Object Oriented Design class. The image processing program works by loading in a PPM image and altering the image and saving it as a new altered image.\
\
This is the first version of our image processing project, which contains a model, controller and a view.  As of now the user can use the program by running the main method in the ImageUtil class. The user can then input different commands depending on what they want to do and they can end the program by typing quit. They inputs must be the following or they won\'92t be considered as valid.\
[			]\
\'91Load image-path image-name\'92 \
'RedComponent \'a0image-name dest-image-name'  \
\'91GreenComponent \'a0image-name dest-image-name' \
'BlueComponent \'a0image-name dest-image-name' \
'ValueGreyScaleImage \'a0image-name dest-image-name' \
'IntensityGreyScaleImage \'a0image-name dest-image-name' \
'LumaGreyScaleImage \'a0image-name dest-image-name' \
'Flip-horizontally \'a0image-name dest-image-name' \
'Flip-vertically \'a0image-name dest-image-name' \
'Brighten (increment)\'a0image-name dest-image-name\'92 \
'Darken (increment)\'a0image-name dest-image-name\'92 \
[			]\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b\fs28 \cf0 Design Thought Process and Classes/ Interfaces Explained
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \
The idea behind our design was to have an image class that had an 2d array with the dimensions width and height. And each element in the array was another class, pixel, which represents each individual pixels RGB colors respectively in fields.  Both of these class have their own respective interfaces as well to allow for possible code additions later on.\
\
We also have the main class that was given to us named ImageUtil and if you run the main method in that class it allows you to run the entire program.\
\
We also have an ImageModel class and interface which is the main class for editing. It is through this class that you can edit any of the loaded pictures using the list of valid commands above.\
(So when you run the imageUtil main method the model that we use is under the imageModel class/interface setup.\
\
We also created a view Interface named TextScriptView and one method that implements it \'91ImageTextScriptView\'92 and the purpose of this method is to allow the program to render a message while the user is attempting to run and use the program.\
\
Now that I\'92ve gotten the main less messy setup out of the way, here\'92s where the code gets a little more crazy.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Manipulating the Image Design 
\f0\b0 \
So in order to manipulate the image we created and ImageManipulationModel interface which allows us edit the image differently based on what type of command is used.\
Off of that we have an abstract ManipulationModel class extending the interface because it turns out there are a bunch of classes that could save a lot of code if we abstract it. \
Then, extending the abstract Manipulation model we have a ChangeBrightness class, and the FlipImage class, the change brightness class will either make the picture brighter or darker and the flip image class with flip the picture either vertically or horizontally.\
\
Also extending the abstract ManipulationModel class, we have another abstract class called GrayScaleImage, we made this abstract because yet again there is a lot of code duplication that can be solved by just making it inside of an abstract class and there is a lot of classes that will need to reuse the code that makes a picture \'93greyScalified\'94.\
\
Furthermore, extending the abstract GrayScaleImage we have four classes which are the three greyScales that require calculating, those being the IntensityGreyScaleImage, ValueGreyScaleImage, and the LumaGreyScaleImage classes, all of which most do some calculating to figure out what the greyScale value of each pixel should be. Finally, the last of the four classes is yet another abstract ComponentImage class, which takes care of the greyscale cases that takes one of the established pixel colors and makes the rest of the colors the same. Extending that componentImage class we have 3 classes that correspond to the three colors. Those being, the classes, BlueComponent, RedComponent, and GreenComponent.\
\

\f1\b Command Design\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 For design the command aspect of this assignment we first started by creating a Commands Interface, this interface will let the given model run a command depending on the input.\
\
Implementing this interface we have three more classes, two of them are for saving and loading commands, the names being SaveCommands and LoadCommands respectively. What those classes do is self explanatory. Lastly, the third class that implements the the command Interface directly is an abstract class named CommandsImpl, the purpose of this class is to abstract the methods to reduce code duplication and to allow code reuse for the rest of the commands the user may use.\
\
This abstract class has nine classes directly extending it the classes are listed and explained below.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}LumaGreyScaleCommands - Runs the luma grey scale method.\
{\listtext	\uc0\u8226 	}VerticalFlipCommands - calls the method that flips the image vertically\
{\listtext	\uc0\u8226 	}ValueGreyScaleCommands - calls the value greyscale method.\
{\listtext	\uc0\u8226 	}BlueComponentCommands - runs the blue component grey scale method\
{\listtext	\uc0\u8226 	}GreenComponentCommands - runs the green component grey scale method\
{\listtext	\uc0\u8226 	}RedComponentCommands - runs the red component grey scale method\
{\listtext	\uc0\u8226 	}IntensityGreyScaleCommands - calls the intensity greyscale method.\
{\listtext	\uc0\u8226 	}HorizontalFlipCommands - calls the method that flips the image horizontally\
{\listtext	\uc0\u8226 	}ABSTRACT class UpdateBrightnessCommands - abstract to save code for updating the brightness, either dimming the picture or brightening it.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Controller Design
\f0\b0 \
\
Lastly we have the controller design, we first have the TextScriptController interface which represents a simple Image editor controller which attempts to alter an image and save it as a different new image. Implementing this class we have the class TextScriptControllerImpl which is the main point of heavy lifting in making the code run and allows the user to control what they want to happen. The class will run looking for inputs and doing the commands based off of the inputs and whether they are valid or not. It will run the correct code accordingly based on what the user inputs.\
\

\f1\b About the Script: 
\f0\b0 \
You can either type all the commands manually after choosing text mode, or let the program to\
Read all the content from script directly.If you prefer the latter, please setup - Script -res/script1.txt to run.\
\
\

\f1\b Citation for Images
\f0\b0 \
\'91quincy\'92 - Wanru Shao\
(and all of the rest of the quincy variations are also from Wanru Shao)\
\
}